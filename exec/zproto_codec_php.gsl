.template 0
#
#   Generates a codec for a protocol specification
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

include "zproto_lib.gsl"
include "zproto_lib_php.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate

.output "$(class.package_dir:no)/$(php_basename()).php"
<?php

/**
 * Library $(php_basename()) is 100% generated. If you edit this file,
 * you will lose your changes at the next build cycle.
 * DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
 *
 * The correct places for commits are:
 *  - The XML model used for this code generation: $(filename)
 *  - The code generation script that built this file: $(script)
.   for class.license
.       if first()
 *
.       endif
 *  $(string.trim (license.):block                                    )
.   endfor
 */

namespace $(php_namespace());

/**
 * A message in $(class.title:no).
 */
class $(php_basename())
{
    /**
     * Buffer holds the serialized data.
     */
    protected $buffer;

    /**
     * Needle
     */
    protected $needle = 0;

    /**
     * $(php_basename()) constructor
     *
     * @param string $msg The message
     */
    public function __construct($msg=NULL)
    {
        // puts/serializes the message signature if $msg is null
        if ($msg == NULL) {
            // 0xAAA$(class.signature) is the signature of the messages
            $this->buffer = pack('C*', 0xAA, 0xA0 | $(class.signature), static::ID);
        } else {
            $this->buffer = $msg;
        }
    }

    /**
     * Validates the signature of the message.
     */
    public function hasValidSignature()
    {
        if (!is_string($this->buffer)) {
            return FALSE;
        }

        // A message has to be at least three bytes, two bytes for
        // signature and one byte for the ID of the message
        return strlen($this->buffer) >= 3 &&
               ord($this->buffer[0]) == 0xAA &&
               ord($this->buffer[1]) == 0xA0 | $(class.signature);
    }

    /**
     * Validates the signature and type/ID of the message.
     */
    public function isValid()
    {
        return $this->getId() == static::ID;
    }

    /**
     * Returns the ID of the message.
     */
    public function getId()
    {
        if ($this->hasValidSignature()) {
            return ord($this->buffer[2]);
        }

        return FALSE;
    }

    /**
     * Unserializes a message. This method is used by unserialize method of
     * the messages in the child class and shouldn't be used directly.
     */
    protected function unserialize()
    {
        if (!$this->isValid()) {
            throw new \\Exception(
                'Invalid signature or message type: ' . bin2hex($this->buffer(3))
            );
        }

        // It's a valid message, move the needle to point to the forth byte (0..3)
        $this->needle = 3;
    }

    /**
     * Serializes the given string
     *
     * @param string $string The string being serialized
     */
    protected function putString($string)
    {
        // Put the length of the string first
        $this->putNumber(strlen($string));
        $this->buffer .= $string;
    }

    /**
     * Serializes the given string
     *
     * @param string $string The string being serialized
     */
    protected function putLongString($string)
    {
        $this->putNumber4(strlen($string));
        $this->buffer .= $string;
    }

    /**
     * Unserializes a string. A serialized string consists of one byte length
     * followed by the string itself.
     */
    protected function getString()
    {
        $len = ord($this->buffer());

        return $this->buffer($len);
    }

    /**
     * Unserializes a long string. A serialized long string consists of 4-byte length
     * followed by the string itself.
     */
    protected function getLongString()
    {
        $len = $this->getNumber4();

        return $this->buffer($len);
    }

    /**
     * Serializes a string. A serialized string consists of one byte length
     * followed by the string itself.
     *
     * @param string $string The string being serialized
     */
    protected function putBytes($string)
    {
        $this->putNumber4(strlen($string));
        $this->buffer .= $string;
    }

    /**
     * Serializes octets.
     *
     * @param string $string The string being serialized
     * @param int    $len    The length of the string
     */
    protected function putOctets($string, $len)
    {
        $this->buffer .= substr($string, 0, $len);
    }

    /**
     * Unserializes byte array which is could have a 64-bit long in length which
     * is huge. The 64-bit length is followed by the data itself. We treat the
     * byte array as PHP strings which is a binary safe string.
     */
    protected function getBytes()
    {
        $len = $this->getNumber4();

        return $this->buffer($len);
    }

    /**
     * Unserializes octets.
     */
    protected function getOctets($len)
    {
        return $this->buffer($len);
    }

    /**
     * Unserializes a 8-bit number.
     */
    protected function getNumber()
    {
        $res = unpack('Cnum', $this->buffer(1));

        return $res['num'];
    }

    /**
     * Unserializes a 16-bit number.
     */
    protected function getNumber2()
    {
        $res = unpack('nnum', $this->buffer(2));

        return $res['num'];
    }

    /**
     * Unserializes a 32-bit number.
     */
    protected function getNumber4()
    {
        $res = unpack('Nnum', $this->buffer(4));

        return $res['num'];
    }

    /**
     * Unserializes a 64-bit number.
     */
    protected function getNumber8()
    {
        $num = unpack('Nhigher/Nlower', $this->buffer(8));
        $num = $num['higher'] << 32 | $num['lower'];

        return $num;
    }

    /**
     * Unserializes a hash.
     */
    protected function getHash()
    {
        $hash = [];
        $size = $this->getNumber4();

        for ($i = 0; $i < $size; $i++) {
            $key   = $this->getString();
            $value = $this->getLongString();

            $hash[$key] = $value;
        }

        return $hash;
    }

    /**
     * Unserializes an array of strings.
     */
    protected function getStrings()
    {
        $strings = [];
        $size = $this->getNumber4();

        for ($i = 0; $i < $size; $i++) {
            $strings[] = $this->getLongString();
        }

        return $strings;
    }

    /**
     * Unserializes a UUID.
     */
    protected function getUuid()
    {
        return $this->buffer(16);
    }

    /**
     * Serializes a 8-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber($number)
    {
        $this->buffer .= chr($number);
    }

    /**
     * Serializes a 16-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber2($number)
    {
        $this->buffer .= pack('n', $number);
    }

    /**
     * Serializes a 32-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber4($number)
    {
        $this->buffer .= pack('N', $number);
    }

    /**
     * Serializes a 64-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber8($number)
    {
        $this->buffer .= pack('NN', $number & 0xffffffff00000000, $number & 0x00000000ffffffff);
    }

    /**
     * Serializes a hash.
     *
     * @param array $hash The hash being serialized
     */
    protected function putHash(array $hash)
    {
        $this->putNumber4(count($hash));
        foreach ($hash as $key => $val) {
            $this->putString($key);
            $this->putLongString($val);
        }
    }

    /**
     * Serializes an array of string.
     *
     * @param array $strings The array of string
     */
    protected function putStrings(array $strings)
    {
        $this->putNumber4(count($strings));
        foreach ($strings as $str) {
            $this->putLongString($str);
        }
    }

    /**
     * Serializes a UUID.
     *
     * @param string $uuid
     */
    protected function putUuid($uuid)
    {
        $this->buffer .= $uuid;
    }

    /**
     * Buffer returns a bytes array size of $size started at $this->needle
     *
     * @param int $size Number of bytes
     */
    protected function buffer($size = 1)
    {
        // Make sure buffer is initialized
        if (!isset($this->buffer[(int) $this->needle+((int) $size-1)])) {
            throw new \\Exception('Malformed message');
        }

        $bytes = substr($this->buffer, $this->needle, $size);
        $this->needle += $size;

        return $bytes;
    }
}
.#
.# Each message is in a separate file
.#
.for message
.output "$(class.package_dir:no)/$(php_basename())/$(php_name(message.name)).php"
<?php

/**
 * Library $(php_basename()) is 100% generated. If you edit this file, you will
 * lose your changes at the next build cycle.
 * DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
 *
 * The correct places for commits are:
 *  - The XML model used for this code generation: $(filename)
 *  - The code generation script that built this file: $(script)
.   for class.license
.       if first()
 *
.       endif
 *  $(string.trim (license.):block                                             )
.   endfor
 */

namespace $(php_namespace())\\$(php_basename());

use $(php_namespace())\\$(php_basename());

/**
.    if defined(message.)
 * $(string.trim (message.):block                                              )
.    else
 * The $(php_name(message.name)) serializes a $(message.name:cobol,upper) message in $(class.title:no).
.    endif
 */
class $(php_name(message.name)) extends $(php_basename())
{
    /**
     * Message ID
     */
    const ID = $(id);

.    for field
.        phpdoc     = "@var $(phptype) \$$(php_lcfirst(name))$(defined(field.)??' ')"
.        phpdocdesc = "$(field.?'':no)"
.        phpdocdesc = string.justify(phpdocdesc, 100 - string.length(phpdoc))
    /**
     * $(phpdoc:block,no)$(phpdocdesc:no,block)
     */
.       if defined(value)
    public \$$(php_lcfirst(name)) = $((type = "number") ?? value ? "$(value:no)");
.       else
    public \$$(php_lcfirst(name));
.       endif

.    endfor
    /**
     * Unserializes a $(message.name:cobol,upper) message
     *
     * @access public
     * @return void
     */
    public function unserialize()
    {
        parent::unserialize();

.    for field
.        if field.type = "number"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->get$(Phptype)$((size = 1) ?? '' ? size)();
.        elsif field.type = "chunk"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getBytes();
.        elsif field.type = "hash"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getHash();
.        elsif field.type = "strings"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getStrings();
.        elsif field.type = "longstr"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getLongString();
.        elsif field.type = "uuid"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getUuid();
.        elsif field.type = "octets"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getOctets($(size));
.        elsif field.type = "frame" | field.type = "msg"
.            # TODO(armen): Implement
.        else
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->get$(Phptype)();
.        endif
.    endfor

        // Cleanup
        $this->needle = 0;
        // 0xAAA$(class.signature) is the signature of the messages
        $this->buffer = pack('C*', 0xAA, 0xA0 | $(class.signature), static::ID);
    }

    /**
     * Serializes a $(message.name:cobol,upper) message
     *
     * @access public
     * @return serialized binary data
     */
    public function serialize()
    {
.    for field
.        if field.type = "number"
        \$this->put$(Phptype)$((size = 1) ?? '' ? size)(\$this->$(php_lcfirst(name)));
.        elsif field.type = "chunk"
        \$this->putBytes(\$this->$(php_lcfirst(name)));
.        elsif field.type = "hash"
        \$this->putHash(\$this->$(php_lcfirst(name)));
.        elsif field.type = "strings"
        \$this->putStrings(\$this->$(php_lcfirst(name)));
.        elsif field.type = "longstr"
        \$this->putLongString(\$this->$(php_lcfirst(name)));
.        elsif field.type = "uuid"
        \$this->putUuid(\$this->$(php_lcfirst(name)));
.        elsif field.type = "octets"
        \$this->putOctets(\$this->$(php_lcfirst(name)), $(size));
.        elsif field.type = "frame" | field.type = "msg"
.            # TODO(armen): Implement
.        else
        \$this->put$(Phptype)(\$this->$(php_lcfirst(name)));
.        endif
.    endfor

        return $this->buffer;
    }
}
.endfor
.for message
.output "$(class.package_dir:no)/$(class.test_dir:no)/$(php_basename())/$(php_name(message.name))Test.php"
<?php

/**
 * Library $(php_basename()) is 100% generated. If you edit this file, you will
 * lose your changes at the next build cycle.
 * DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
 *
 * The correct places for commits are:
 *  - The XML model used for this code generation: $(filename)
 *  - The code generation script that built this file: $(script)
.   for class.license
.       if first()
 *
.       endif
 *  $(string.trim (license.):block                                             )
.   endfor
 */

namespace $(php_namespace())\\$(php_basename());

/**
.    if defined(message.)
 * $(string.trim (message.):block                                              )
.    else
 * The $(php_name(message.name)) serializes a $(message.name:cobol,upper) message in $(class.title:no).
.    endif
 */
class $(php_name(message.name))Test extends \\PHPUnit_Framework_TestCase
{
    public function test$(php_name(message.name))()
    {
        \$$(name) = new $(php_name(message.name))();
.   obj = name
.   for field where !defined (value)
.       if type = "number"
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = $(->test.?123:);
.       elsif type = "octets"
.           if defined (->test)
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = "$(->test.)";
.           else
.               data = "z" * size
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = "$(data)";
.           endif
.       elsif type = "string" | type = "longstr"
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = "$(->test.?"Life is short but Now lasts for ever":)";
.       elsif type = "strings"
.           strs = ""
.           if defined (->test)
.               for test
.                   strs += '"$(test.:no)"'
.                   if !last ()
.                       strs += ","
.                   endif
.               endfor
.           else
.               strs = '"Name: Brutus", "Age: 43"'
.           endif
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = [$(strs:no)];
.       elsif type = "hash"
.           hash = ""
.           if defined (->test)
.               for test
.                   hash += '"$(test.name:no)" => "$(test.:no)"'
.                   if !last ()
.                       hash += ","
.                   endif
.               endfor
.           else
.               hash = '"Name" => "Brutus", "Age" => "43"'
.           endif
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = [$(hash:no)];
.       elsif type = "uuid"
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = hex2bin("$(->test.?"Captcha Diem":)");
.       elsif type = "chunk"
        \$$(obj)->$(php_lcfirst(name)%-$(field_maxlen)s) = "$(->test.?"Captcha Diem":)";
.       elsif type = "frame" | type = "msg"
.            # TODO(armen): Implement
.       endif
.   endfor
.   if defined (digest)

        $msg = \$$(name)->serialize();
.       # For debug: echo "$(php_name(message.name)) ".bin2hex(\$msg).PHP_EOL;
        $this->assertSame("$(digest)", sha1(\$msg));

        \$$(name)Rcvd = new $(php_name(message.name))($msg);
        \$$(name)Rcvd->unserialize();

        $msg = \$$(name)Rcvd->serialize();
        $this->assertSame("$(digest)", sha1(\$msg));

        $this->assertEquals(\$$(name), \$$(name)Rcvd);

.   endif
    }
}
.endfor
.output "$(class.package_dir:no)/phpunit.xml"
<phpunit
    backupGlobals               = "false"
    backupStaticAttributes      = "false"
    colors                      = "false"
    convertErrorsToExceptions   = "true"
    convertNoticesToExceptions  = "true"
    convertWarningsToExceptions = "true"
    processIsolation            = "false"
    stopOnFailure               = "false"
    syntaxCheck                 = "true"
    bootstrap                   = "vendor/autoload.php"
    >

    <testsuites>
        <testsuite name="$(class.Title) Test Suite">
            <directory>$(class.test_dir)/</directory>
        </testsuite>
    </testsuites>

</phpunit>
.output "$(class.package_dir:no)/composer.json"
{
    "name" : "$(php_basename())",
    "license": "MPL",
    "description": "$(class.Title)",
    "version": "1.0.0",
    "prefer-stable" : true,
    "autoload": {
        "psr-4": {
            "$(php_namespace())\\\\": "."
        }
    },
    "require": {
        "php": ">=5.4.30"
    }
}
