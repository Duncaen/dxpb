Vaelatern's short list (v0.1.0):
	- Debug dxpb as a whole.
	- Work out how to handle dbg and 32bit packages
	- Actually handle provides= packages

Todo (v0.1.1):
	- Improve xbps-src's `show-pkg-var` to not have a read-write loop.
	  This requires significant modifications to dxpb.
	- Shim to unmark package as bad (similar to dxpb-poke)
	- Request 32bit packages. Not sure how to arrange this, need to learn
	  more about how Void does 32bit packages.
	  E_INADEQUATE_KNOWLEDGE
	- Fix -dbg packages being fetched over the wire. Special handling in
	  filer? Maybe magic new pkgs under pkgimport? Probably cleanest via
	  pkgimport, generating a "shimmy" pkg that only depends on the main
	  pkg if the -dbg pkg will be built.

Todo (v0.1.2):
	- Actual tests for everything.

Longer term:
	- Replace most usage of zhash and zlist with libbsd alternatives with
	  the goal of #including czmq in fewer parts of the codebase to reduce
	  number of include files to parse on compilation. These would need to
	  be measured as possible (hopeful) runtime speed gains.
	- Improve warnings, maybe attempt to clone a void-packages repo if none
	  is found (pkgimport-master)
	- bfs.c: depends on errno where it is only optional. This should be
	  changed as soon as practical. See NOT_POSIX.
	- Would be nice if the pkgimport master can request more agents. This
	  would need to be managed by a broker who just checks if the request
	  is okay and spawns them (using a fork. Must use a fork to avoid bad
	  intercations with fds). This broker could even have multiple
	  instances running, and use PUSH/PULL sockets to allow free load
	  balancing, allowing xbps-src threads to keep running under the other
	  daemon in event of crash.
	- The bdb and bgit code have no mechanism for recovery if not
	  everything is perfect. It would be good to have a better mechanism
	  for dealing with problems.  Right now, everything is an assert() but
	  some of those asserts should be replaced with actual error handling.
	  An example is recovering with a sqlite journal in place - maybe just
	  drop the journal.
	- bdb with a different backend. I like postgresql, and the tooling for
	  it is pretty good, maybe it will be good to have this database
	  readable by others.
	- Build a proxy so local builders can use just one connection to the
	  master.

Idle Thoughts:
	- It would be cool to develop a better/smarter client based on this
	  protocol. Clients don't have to be in any one language. With zeromq
	  linking everything, basically any language people actually use can
	  be used for any component with no change in any other.
	- It would be nice to have "nice" shutdowns. That or be certain there
	  are no states where a SIGTERM would be bad.
	- Be great if whomever decided to use "package" to refer to software
	  packaging decided to be all mundane and use the word "box". Much
	  faster to type and as long as the word "pkg".
