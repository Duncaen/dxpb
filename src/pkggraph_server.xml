<class
	name = "pkggraph_server"
	title = "Distributed Xbps-src Package Build Orchestrator"
	script = "../exec/zproto_server_c"
	protocol_class = "pkggraph_msg"
	package_dir = "../include"
	source_dir = "."
	project_header = "pkggraph_server.h"
	>

	Names of states, events, and actions, are all case insensitive.
	By convention, we use all-caps for protocol events only.

	<state name = "start">
		<event name = "HELLO" next = "determine role">
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "*">
			<action name = "send" message = "IFORGOTU" />
		</event>
		<after>
			<action name = "ensure all configuration is complete" />
		</after>
	</state>

	<state name = "determine role" inherit = "defaults">
		<event name = "IMTHEGRAPHER" next = "i am the grapher">
			<action name = "register grapher" />
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "IMAWORKER" next = "i am a worker">
			<action name = "register worker" />
			<action name = "establish subgroup" />
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "IAMSTORAGE" next = "i am storage">
			<action name = "register storage" />
			<action name = "send" message = "ROGER" />
		</event>
	</state>

	<state name = "i am the grapher" inherit = "defaults">
		<event name = "UPDATE BOOTSTRAP">
			<action name = "assert is grapher" />
			<action name = "all workers should bootstrap-update" />
		</event>
		<event name = "WORKERCANHELP">
			<action name = "assert is grapher" />
			<action name = "confirm worker still valid" />
			<action name = "tell logger to reset log" />
			<action name = "tell the worker to start work" />
		</event>
		<event name = "you've got a memo">
			<action name = "assert is grapher" />
			<action name = "parse memo" />
		</event>
		<event name = "tell grapher job ended">
			<action name = "assert is grapher" />
			<action name = "send" message = "JOB ENDED" />
			<action name = "set event if more memos" />
		</event>
		<event name = "tell grapher worker gone">
			<action name = "assert is grapher" />
			<action name = "send" message = "FORGET ABOUT ME" />
			<action name = "set event if more memos" />
		</event>
		<event name = "tell grapher worker can help">
			<action name = "assert is grapher" />
			<action name = "send" message = "WORKERCANHELP" />
			<action name = "set event if more memos" />
		</event>
		<event name = "expired">
			<action name = "remove self as grapher" />
			<action name = "terminate" />
		</event>
	</state>

	<state name = "i am a worker" inherit = "defaults">
		<!-- This is one large state because it makes limited sense to
			restrict connections to being a single worker -->
		<event name = "HELLO" next = "determine role">
			<action name = "remove all workers" />
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "INVALID">
			<action name = "remove all workers" />
			<action name = "terminate" />
		</event>
		<event name = "been ordered to update bootstrap">
			<action name = "send" message = "UPDATE BOOTSTRAP" />
		</event>
		<event name = "ICANHELP">
			<action name = "register worker as ready to help" />
			<action name = "notify grapher if he's around" />
		</event>
		<event name = "FORGET ABOUT ME">
			<action name = "remove worker" />
			<action name = "notify grapher if he's around" />
		</event>
		<event name = "you can help with this">
			<action name = "transform worker job for assignment" />
			<action name = "send" message = "WORKERCANHELP" />
		</event>
		<event name = "JOB ENDED">
			<action name = "act on job return" />
			<action name = "notify grapher if he's around" />
			<action name = "remove worker" />
		</event>
		<event name = "LOGHERE">
			<action name = "route log" />
		</event>
		<event name = "*" next = "start">
			killmenow should find this state.
			<action name = "remove all workers" />
			<action name = "send" message = "INVALID" />
			<action name = "remove self as worker" />
		</event>
	</state>

	<state name = "i am storage" inherit = "defaults">
		<event name = "send the log">
			<action name = "assert is storage" />
			<action name = "grab a log chunk" />
		</event>
		<event name = "send resetlog">
			<action name = "assert is storage" />
			<action name = "send" message = "RESETLOG" />
			<action name = "post process sending log chunk" />
		</event>
		<event name = "send loghere">
			<action name = "assert is storage" />
			<action name = "send" message = "LOGHERE" />
			<action name = "post process sending log chunk" />
		</event>
		<event name = "*" next = "start">
			<action name = "send" message = "INVALID" />
			<action name = "remove self as storage" />
		</event>
	</state>

	<state name = "defaults">
		<event name = "*" next = "start">
			killmenow should find this state.
			<action name = "send" message = "INVALID" />
		</event>
		<event name = "PING">
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "HELLO" next = "determine role">
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "UPDATE BOOTSTRAP">
			no-op
		</event>
		<event name = "ROGER">
			no-op
		</event>
	</state>

	<state name = "unreachable">
		<event name = "killmenow" />
	</state>
</class>
