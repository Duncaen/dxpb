<class
	name = "pkgimport_grapher"
	title = "Package Grapher"
	script = "../exec/zproto_client_c"
	protocol_class = "pkgimport_msg"
	project_header = "pkgimport_grapher.h"
	package_dir = "."
	>

	This class is to provide a compliant zactor for the dxpb solver, to
	be able to properly interact with the import agent.

	<state name = "start" inherit = "defaults">
		<event name = "set publish endpoint">
			<action name = "set publish endpoint as supplied" />
		</event>
		<event name = "set db path">
			<action name = "set db path as supplied" />
		</event>
		<event name = "construct">
			<action name = "connect to server" />
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "ROGER" next = "register" />
		<event name = "connect error" next = "die">
			<action name = "complain about connection error" />
		</event>
		<event name = "IFORGOTU">
			<action name = "send" message = "HELLO" />
		</event>
	</state>
	<state name = "register" inherit = "defaults">
		<before>
			<action name = "send" message = "IAMTHEGRAPHER" />
		</before>
		<event name = "ROGER" next = "unstable" />
		<event name = "IFORGOTU" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<after>
			<action name = "read all from db" />
			<action name = "decide next action from hash" />
		</after>
	</state>
	<state name = "unstable" inherit = "working defaults">
		<before>
			<action name = "set expiry low" />
		</before>
		<event name = "UNSTABLE" />
		<event name = "IFORGOTU" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "no hash found">
			<action name = "send" message = "PLZREADALL" />
		</event>
		<event name = "confirm hash">
			<action name = "send" message = "WESEEHASH" />
		</event>
		<event name = "expired">
			<action name = "send" message = "STABLESTATUSPLZ" />
		</event>
		<event name = "worker available">
			<action name = "add worker to list" />
		</event>
		<event name = "STABLE" next = "stable">
			<action name = "store hash">
				So the listening poller knows what's what.
			</action>
		</event>
	</state>
	<state name = "stable" inherit = "working defaults">
		<before>
			<action name = "write graph to db" />
			<action name = "resolve graph" />
			<action name = "get packages" />
			<action name = "ask around for wanted pkgs" />
			<action name = "set expiry high" />
		</before>
		<event name = "IFORGOTU" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "worker available">
			<action name = "add worker to list" />
			<action name = "find package for worker" />
		</event>
		<event name = "UNSTABLE" next = "unstable">
			<action name = "store hash">
				So in this case, make the hash null.
			</action>
		</event>
	</state>
	<state name = "working defaults">
		<event name = "INVALID" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "ROGER" />
		<event name = "*" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "KTHNKSBYE" next = "die" />
		<event name = "expired">
			<action name = "send" message = "PING" />
		</event>
		<event name = "PKGINFO" next = "unstable">
			<action name = "create pkg from info">
				Turn a pkgimport_msg into a struct pkg and save
			</action>
			<action name = "send" message = "ROGER" />
		</event>
		<event name = "PKGDEL" next = "unstable">
			<action name = "mark pkg for deletion">
				Take pkgname and track for later removal
			</action>
		</event>
		<event name = "worker gone">
			<action name = "return pkg to pending" />
			<action name = "unassign worker" />
			<action name = "remove worker from list" />
		</event>
		<event name = "pkg now completed">
			<action name = "ask around for this pkg" />
			<action name = "unassign worker" />
			<action name = "remove worker from list" />
		</event>
		<event name = "pkg not here">
			<action name = "note pkg not yet around" />
			<action name = "match workers to this pkg" />
		</event>
		<event name = "pkg here">
			<action name = "note pkg present" />
			<action name = "get package list for arch" />
			<action name = "ask around for wanted pkgs" />
		</event>
		<event name = "pkg failed to build">
			<action name = "mark pkg bad" />
		</event>
		<event name = "worker not appropiate">
			<action name = "return pkg to pending" />
			<action name = "negative pkg affinity for wrkr" />
		</event>
	</state>
	<state name = "die">
		<before>
			<action name = "terminate" />
			<action name = "cease all operations" />
		</before>
		<event name = "*">
			We shouldn't ever get here... but the code generation
			doesn't like empty states.
			<action name = "send" message = "INVALID" />
		</event>
	</state>
	<state name = "defaults">
		<event name = "INVALID" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "ROGER" />
		<event name = "*" next = "start">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "KTHNKSBYE" next = "die" />
		<event name = "expired">
			<action name = "send" message = "PING" />
		</event>
	</state>

	<method name = "construct">
		Used to connect to the server.
		<field name = "endpoint" type = "string" />
	</method>

	<method name = "pkg now completed">
		<field name = "pkgname" type = "string" />
		<field name = "version" type = "string" />
		<field name = "arch" type = "string" />
	</method>

	<method name = "worker available">
		<field name = "addr" type = "integer" size = "2" />
		<field name = "check" type = "integer" size = "4" />
		<field name = "hostarch" type = "string" />
		<field name = "targetarch" type = "string" />
		<field name = "iscross" type = "number" size = "1" />
		<field name = "cost" type = "number" size = "2" />
	</method>

	<method name = "worker gone">
		<field name = "addr" type = "integer" size = "2" />
		<field name = "check" type = "integer" size = "4" />
	</method>

	<method name = "pkg here">
		<field name = "pkgname" type = "string" />
		<field name = "version" type = "string" />
		<field name = "arch" type = "string" />
	</method>

	<method name = "pkg not here">
		<field name = "pkgname" type = "string" />
		<field name = "version" type = "string" />
		<field name = "arch" type = "string" />
	</method>

	<method name = "pkg failed to build">
		<field name = "addr" type = "integer" size = "2" />
		<field name = "check" type = "integer" size = "4" />
		<field name = "pkgname" type = "string" />
		<field name = "version" type = "string" />
		<field name = "arch" type = "string" />
	</method>

	<method name = "worker not appropiate">
		<field name = "addr" type = "integer" size = "2" />
		<field name = "check" type = "integer" size = "4" />
	</method>

	<method name = "set db path">
		<field name = "dbpath" type = "string" />
	</method>

	<method name = "set publish endpoint">
		<field name = "pubpoint" type = "string" />
	</method>
</class>
