<class
	name = "pkggraph_grapher"
	title = "Package Grapher - World Link"
	script = "../exec/zproto_client_c"
	protocol_class = "pkggraph_msg"
	project_header = "pkggraph_grapher.h"
	package_dir = "."
	>

	<!--
	I will be forwarding from the msgpipe:
		<message name = "UPDATE BOOTSTRAP" />
		<message name = "WORKERCANHELP" />
	I will be sending down the msgpipe:
		<message name = "ICANHELP" />
		<message name = "PKGDONE" />
		<message name = "FORGET_ABOUT_ME" />
		<message name = "JOB_ENDED" />
	-->

	<state name = "start" inherit = "defaults">
		<event name = "construct" next = "negotiate">
			<action name = "connect to server" />
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "connect error" next = "die">
			<action name = "complain about connection error" />
		</event>
		<event name = "set ssl client keys">
			<action name = "set ssl client keys" />
		</event>
	</state>
	<state name = "negotiate" inherit = "defaults">
		<event name = "ROGER" next = "hesitate">
			<action name = "send" message = "IMTHEGRAPHER" />
		</event>
	</state>
	<state name = "hesitate" inherit = "defaults">
		<event name = "ROGER" next = "ready">
			<action name = "tell msgpipe we are connected" />
		</event>
		<after>
			<action name = "set expiry" />
		</after>
	</state>

	<state name = "ready" inherit = "defaults">
		<before>
			<action name = "trigger send saved messages" />
		</before>
		<event name = "PKGDONE">
			<action name = "send message verbatim down the msgpipe">
				The reader at the end of the msgpipe will know what to do.
			</action>
		</event>
		<event name = "ICANHELP">
			<action name = "send message verbatim down the msgpipe" />
		</event>
		<event name = "FORGET ABOUT ME">
			<action name = "send message verbatim down the msgpipe" />
		</event>
		<event name = "act on do update bootstrap">
			<action name = "prepare update bootstrap from pipe" />
			<action name = "send" message = "UPDATE BOOTSTRAP" />
			<action name = "trigger send saved messages" />
		</event>
		<event name = "act on do workercanhelp">
			<action name = "prepare workercanhelp from pipe" />
			<action name = "send" message = "WORKERCANHELP" />
			<action name = "trigger send saved messages" />
		</event>
		<!-- overwrite the default here -->
		<event name = "do update bootstrap">
			<action name = "store update bootstrap for later sending" />
			<action name = "trigger send saved messages" />
		</event>
		<event name = "do workercanhelp">
			<action name = "store workercanhelp for later sending" />
			<action name = "trigger send saved messages" />
		</event>
	</state>

	<state name = "defaults">
		<event name = "do update bootstrap">
			<action name = "store update bootstrap for later sending" />
		</event>
		<event name = "do workercanhelp">
			<action name = "store workercanhelp for later sending" />
		</event>
		<event name = "IFORGOTU" next = "negotiate">
			<action name = "send" message = "HELLO" />
		</event>
		<event name = "ROGER" />
		<event name = "INVALID" next = "die" />
		<event name = "*" next = "die">
			<action name = "send" message = "INVALID" />
		</event>
		<event name = "KTHNKSBYE" next = "die" />
		<event name = "expired">
			<action name = "send" message = "PING" />
		</event>
	</state>

	<state name = "die">
		<before>
			<action name = "cease all operations" />
			<action name = "terminate" />
		</before>
		<event name = "*">
			We shouldn't ever get here... but the code generation
			doesn't like empty states.
			<action name = "send" message = "INVALID" />
		</event>
	</state>

	<method name = "construct">
		Used to connect to the server.
		<field name = "endpoint" type = "string" />
	</method>

	<method name = "do update bootstrap">
	</method>

	<method name = "do workercanhelp">
		<field name = "addr" type = "number" size = "2" />
		<field name = "check" type = "number" size = "4" />
		<field name = "pkgname" type = "string" />
		<field name = "version" type = "string" />
		<field name = "arch" type = "string" />
	</method>

	<method name = "set ssl client keys">
		<field name = "privkey" type = "string" />
		<field name = "pubkey" type = "string" />
		<field name = "serverkey" type = "string" />
	</method>
</class>
